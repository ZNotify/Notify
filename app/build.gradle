plugins {
    id "com.android.application"
    id "kotlin-android"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.7.20"
    id "com.google.gms.google-services"
}

def gitCommitId = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()

def gitLastTag = "git describe --tags --abbrev=0".execute([], project.rootDir).text.trim()
if (gitLastTag == "") {
    throw new GradleException("No git tags found. Please create a tag before building.")
}

def gitLastCommitMessage = "git log -1 --pretty=%B".execute([], project.rootDir).text.trim()

def isRelease = gitLastCommitMessage.contains("[release")

def isDebug = gradle.startParameter.taskRequests.any {
    it.args.any { it.endsWith("Debug") }
}
def buildType = isDebug ? ".debug" : ""

// Get timestamp in seconds
def currentVersionCode = (new Date()).getTime() / 1000

static def isCI(){
    return System.getenv("CI") == "true"
}

def baseVersionName = "1.0.0"

if (isCI()){
    def currentEvent = System.getenv("GITHUB_EVENT_NAME")
    if (currentEvent == "push") {
        if (isRelease){
            def versionAll = gitLastCommitMessage.split("\\[release:")[1]
            def version = versionAll.split("]")[0].trim()
            baseVersionName = version
        } else {
            def branch = System.getenv("GITHUB_REF_NAME")
            if (branch == null) {
                throw new IllegalArgumentException("GITHUB_REF_NAME is not set")
            }
            baseVersionName = gitLastTag + "." + gitCommitId + ".canary"
        }
    }
}

def versionBase = "${baseVersionName}${buildType}"

android {
    defaultConfig {
        applicationId "top.learningman.push"
        minSdk 28
        targetSdk 33
        versionCode = currentVersionCode
        versionName = versionBase
    }

    signingConfigs {
        auto {
            def password
            def CI = System.getenv("CI")
            if (CI != null) {
                password = System.getenv("PASSWORD")
            } else {
                Properties properties = new Properties()
                properties.load(file("../local.properties").newDataInputStream())
                password = properties.getProperty("PASSWORD")
            }

            if (password == null || password.isEmpty()) {
                throw new Exception("Signing password not found.")
            }
            storeFile file("../release.jks")
            keyAlias "key"
            storePassword password
            keyPassword password
        }
    }
    compileSdk 33

    buildTypes {
        debug {
            signingConfig signingConfigs.auto
        }
        release {
            signingConfig signingConfigs.auto
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"

        freeCompilerArgs += [
                // TODO: use k2
        ]
    }
    packagingOptions {
        resources {
            excludes += ["META-INF/atomicfu.kotlin_module"]
        }
    }
    viewBinding {
        enabled = true
    }

    namespace "top.learningman.push"

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0-dev-k1.7.20-e49b3b6028b'
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }

    flavorDimensions "pub"
    productFlavors {
        free {
            versionNameSuffix "(free)"
        }
        github {
            versionNameSuffix "(github)"
        }
        appcenter {
            versionNameSuffix "(appcenter)"
        }
        play {
            versionNameSuffix "(play)"
        }
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.9.0"
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation "androidx.appcompat:appcompat:1.5.1"

    implementation 'androidx.activity:activity-compose:1.6.0'
    implementation "androidx.compose.material3:material3:1.0.0-rc01"
    implementation "androidx.compose.material3:material3-window-size-class:1.0.0-rc01"
    implementation 'androidx.compose.animation:animation:1.2.1'
    implementation 'androidx.compose.ui:ui-tooling:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    implementation "com.google.android.material:compose-theme-adapter:1.1.20"

    implementation "com.google.android.material:material:1.6.1"

    implementation platform('com.google.firebase:firebase-bom:30.5.0')
    implementation "com.google.firebase:firebase-messaging-ktx"

    playImplementation 'com.google.android.play:app-update:2.0.0'
    playImplementation 'com.google.android.play:app-update-ktx:2.0.0'

    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'

    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    def lifecycle_version = "2.5.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation "androidx.fragment:fragment-ktx:1.5.3"
    implementation "androidx.activity:activity-ktx:1.6.0"
    implementation "androidx.preference:preference-ktx:1.2.0"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    implementation "com.github.code-mc:material-icon-lib:1.1.5"

    def ktor_version = '2.1.2'
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-websockets:$ktor_version"
    implementation "io.ktor:ktor-client-okhttp:$ktor_version"

    implementation "dev.zxilly:notify-sdk:2.1.1"

    def markwonVersion = "4.6.2"
    implementation "io.noties.markwon:core:${markwonVersion}"
    implementation "io.noties.markwon:ext-tables:${markwonVersion}"
    implementation "io.noties.markwon:html:${markwonVersion}"
    implementation "io.noties.markwon:image:${markwonVersion}"

    def appCenterSdkVersion = "4.4.5"
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    implementation 'com.github.Zxilly:SetupWizardLib:master-SNAPSHOT'
    implementation 'com.github.XomaDev:MIUI-autostart:master-SNAPSHOT'

    implementation 'com.github.Zxilly:upgrader:fc2ce0efb8'
}